{"remainingRequest":"/Users/Fandy/go/src/excel2config/front/node_modules/babel-loader/lib/index.js!/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Fandy/go/src/excel2config/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Fandy/go/src/excel2config/front/src/components/CodeDiff/CodeDiffViewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Fandy/go/src/excel2config/front/src/components/CodeDiff/CodeDiffViewer.vue","mtime":1619491542472},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CodeDiffViewer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"diff-viewer\">\n        <h3>{{title}}</h3>\n        <div class=\"container\" v-if=\"newContent && oldContent\">\n            <div class=\"left\">\n                <code-chunk v-for=\"(chunk, index) in splitedLeft\"\n                    :key=\"index\"\n                    :chunk=\"chunk\" @expand=\"expandChunk\"/>\n            </div>\n            <div class=\"right\">\n                <code-chunk v-for=\"(chunk, index) in splitedRight\"\n                    :key=\"index\"\n                    :chunk=\"chunk\" @expand=\"expandChunk\"/>\n            </div>\n        </div>\n        <div v-else v-for=\"(chunk, index) in unifiedResult\"\n            :key=\"index\">\n            <code-chunk :chunk=\"chunk\" :index=\"index\"/>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {diffLines} from 'diff/lib/diff/line';\nimport CodeChunk from './CodeDiffChunk.vue';\n\nexport default {\n    name: 'code-iff-viewer',\n    components: {\n        CodeChunk\n    },\n    props: {\n        oldContent: String,\n        newContent: String,\n        title: String,\n        collapse: {\n            type: Number,\n            default: 10 // 连续超过10行没改动，默认折叠\n        }\n    },\n    data() {\n        return {\n            unifiedResult: [],\n            splitedLeft: [],\n            splitedRight: []\n        };\n    },\n    created() {\n        this.calculateDiff();\n    },\n    watch: {\n        'title'(v) {\n            this.calculateDiff();\n        }\n    },\n    methods: {\n        calculateDiff() {\n            this.unifiedResult = this.diff();\n            this.splitedLeft = [];\n            this.splitedRight = [];\n            if (this.unifiedResult.length) {\n                const {left, right} = this.splitDiffResult(this.unifiedResult);\n                this.adaptSplitResult(left, right);\n            }\n        },\n        diff() {\n            // 修改\n            if (this.newContent && this.oldContent) {\n                const diffs = diffLines(this.oldContent, this.newContent, {\n                    ignoreWhitespace: false\n                });\n                const length = diffs.length;\n                return diffs.map((chunk, index) => {\n                    const type = chunk.added ? 'add' : (chunk.removed ? 'remove' : '');\n                    // delete last element of array, because split will produce more one line.\n                    let lines = chunk.value.split('\\n');\n                    lines = index === length - 1 ? lines.slice(0) : lines.slice(0, -1);\n                    return {\n                        type,\n                        lines,\n                        lineCount: lines.length,\n                        collapse: !type && lines.length > this.collapse\n                    };\n                });\n            }\n            else if (this.newContent || this.oldContent) {\n                // 新增 or 删除\n                const diffs = this.newContent || this.oldContent;\n                const lines = diffs.split('\\n');\n                const type = !this.newContent ? 'remove' : (!this.oldContent ? 'add' : '');\n\n                return [{\n                    type,\n                    lines,\n                    lineCount: lines.length,\n                    startCount: 1\n                }];\n            }\n            return [];\n        },\n\n        /**\n         * 由于 diff库返回的结果是 chunk list非双边对比结果，所以这里做了处理\n         *  1. 新增块放入右侧，如果下一块为删除块则视为更改代码，此时左侧需补充空行。\n         *  2. 删除块放入左侧，如果下一块为新增块则视为更改代码, 此时右侧补充空行。\n         *  3. 无变化块，两边都需放入。\n         *\n         * @param {Array} diffResult diff库调用返回的结果\n         * @return {Object} {left, right} 左右分离结果\n        */\n        splitDiffResult(diffResult) {\n            const left = {\n                chunks: [],\n                lineCount: 1\n            };\n            const right = {\n                chunks: [],\n                lineCount: 1\n            };\n            const setChunkLineNumber = (chunk, lineNumer) => {\n                chunk.startLineNumber = lineNumer;\n                return lineNumer + chunk.lineCount;\n            };\n\n            diffResult.forEach((chunk, index) => {\n                if (chunk.type === 'add') {\n                    right.lineCount = setChunkLineNumber(chunk, right.lineCount);\n                    right.chunks.push(chunk);\n                    // 判断是否增加空白块\n                    if (this.shouldSetBlank(chunk.type, index)) {\n                        left.chunks.push(this.createBlankChunk(chunk.lineCount));\n                    }\n                }\n                else if (chunk.type === 'remove') {\n                    left.lineCount = setChunkLineNumber(chunk, left.lineCount);\n                    left.chunks.push(chunk);\n                    // 判断是否增加空白块\n                    if (this.shouldSetBlank(chunk.type, index)) {\n                        right.chunks.push(this.createBlankChunk(chunk.lineCount));\n                    }\n                }\n                else {\n                    // 没有变动，两边放入。\n                    left.lineCount = setChunkLineNumber(chunk, left.lineCount);\n                    left.chunks.push(chunk);\n\n                    const clonedChunk = {...chunk};\n                    right.lineCount = setChunkLineNumber(clonedChunk, right.lineCount);\n                    right.chunks.push(clonedChunk);\n                }\n            });\n            return {left, right};\n        },\n        adaptSplitResult(left, right) {\n            left.chunks.forEach((leftChunk, index) => {\n                const rightChunk = right.chunks[index];\n                if (leftChunk.collapse && rightChunk.collapse) {\n                    // 记录下左右栏chunk index; 点击展开时，通过此index定位chunk进行展开。\n                    leftChunk.leftIndex = rightChunk.leftIndex = this.splitedLeft.length;\n                    leftChunk.rightIndex = rightChunk.rightIndex = this.splitedRight.length;\n                }\n\n                this.splitedLeft.push(leftChunk);\n                this.splitedRight.push(rightChunk);\n\n                // 修改的行数不一致时，补充空白块。例如：左栏删除 3行，右栏添加5行代码。则左栏需补充 2行空白，进行对齐。\n                if (leftChunk.type === 'remove' && rightChunk.type === 'add') {\n                    const count = leftChunk.lineCount - rightChunk.lineCount;\n                    if (count < 0) {\n                        this.splitedLeft.push(this.createBlankChunk(Math.abs(count)));\n                    }\n                    else if (count > 0) {\n                        this.splitedRight.push(this.createBlankChunk(count));\n                    }\n                }\n            });\n        },\n\n        /**\n         * 是否应该设置空白块：\n         *    1. 最后一块返回 true\n         *    2. 当前块是‘remove'类型，看下一块类型是否为空（没有变化）\n         *    3. 当前块是‘add'类型，看上一块类型是否为空(没有变化)\n         *\n         * @param {type} type 当前块类型\n         * @param {inddex} index 当前块索引\n         * @return {boolean}\n         */\n        shouldSetBlank(type, index) {\n            if (index === this.unifiedResult.length - 1) {\n                return true;\n            }\n            index = type === 'remove' ? index + 1 : index - 1;\n\n            const chunk = this.unifiedResult[index];\n            return !chunk || !chunk.type;\n        },\n\n        /**\n         * 创建空白块\n         *\n         * @param {number} lineCount 行数\n         * @return {Object} 空白块对象\n         */\n        createBlankChunk(lineCount) {\n            return {\n                type: 'blank',\n                lineCount,\n                lines: new Array(lineCount).fill(' ')\n            };\n        },\n        expandChunk(leftIndex, rightIndex) {\n            this.splitedLeft[leftIndex].collapse = false;\n            this.splitedRight[rightIndex].collapse = false;\n        }\n    }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.diff-viewer {\n    font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace, sans-serif;\n    font-size: 12px;\n    margin-bottom: 15px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n\n    h3 {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 5px 10px;\n        height: 40px;\n        line-height: 30px;\n        border-radius: 5px 5px 0 0;\n        border-bottom: 1px solid #dbdbdb;\n        background-color: #f7f7f7;\n        color: #333;\n        font-weight: 600;\n    }\n\n    .container {\n        display: flex;\n        > div {\n            width: 50%;\n        }\n    }\n}\n</style>\n"],"sourceRoot":"src/components/CodeDiff"}]}