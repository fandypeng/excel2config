{"remainingRequest":"/Users/Fandy/go/src/excel2config/front/node_modules/thread-loader/dist/cjs.js!/Users/Fandy/go/src/excel2config/front/node_modules/babel-loader/lib/index.js!/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Fandy/go/src/excel2config/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Fandy/go/src/excel2config/front/src/views/table/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Fandy/go/src/excel2config/front/src/views/table/index.vue","mtime":1618280703743},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}