{"remainingRequest":"/Users/Fandy/workspace/e2c/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Fandy/workspace/e2c/front/src/views/table/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Fandy/workspace/e2c/front/src/views/table/index.vue","mtime":1617965430137},{"path":"/Users/Fandy/workspace/e2c/front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Fandy/workspace/e2c/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/workspace/e2c/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}