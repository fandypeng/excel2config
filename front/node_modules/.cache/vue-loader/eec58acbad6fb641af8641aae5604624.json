{"remainingRequest":"/Users/Fandy/go/src/excel2config/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Fandy/go/src/excel2config/front/src/components/CodeDiff/CodeDiffViewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Fandy/go/src/excel2config/front/src/components/CodeDiff/CodeDiffViewer.vue","mtime":1619491542472},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Fandy/go/src/excel2config/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["CodeDiffViewer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"CodeDiffViewer.vue","sourceRoot":"src/components/CodeDiff","sourcesContent":["<template>\n    <div class=\"diff-viewer\">\n        <h3>{{title}}</h3>\n        <div class=\"container\" v-if=\"newContent && oldContent\">\n            <div class=\"left\">\n                <code-chunk v-for=\"(chunk, index) in splitedLeft\"\n                    :key=\"index\"\n                    :chunk=\"chunk\" @expand=\"expandChunk\"/>\n            </div>\n            <div class=\"right\">\n                <code-chunk v-for=\"(chunk, index) in splitedRight\"\n                    :key=\"index\"\n                    :chunk=\"chunk\" @expand=\"expandChunk\"/>\n            </div>\n        </div>\n        <div v-else v-for=\"(chunk, index) in unifiedResult\"\n            :key=\"index\">\n            <code-chunk :chunk=\"chunk\" :index=\"index\"/>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {diffLines} from 'diff/lib/diff/line';\nimport CodeChunk from './CodeDiffChunk.vue';\n\nexport default {\n    name: 'code-iff-viewer',\n    components: {\n        CodeChunk\n    },\n    props: {\n        oldContent: String,\n        newContent: String,\n        title: String,\n        collapse: {\n            type: Number,\n            default: 10 // 连续超过10行没改动，默认折叠\n        }\n    },\n    data() {\n        return {\n            unifiedResult: [],\n            splitedLeft: [],\n            splitedRight: []\n        };\n    },\n    created() {\n        this.calculateDiff();\n    },\n    watch: {\n        'title'(v) {\n            this.calculateDiff();\n        }\n    },\n    methods: {\n        calculateDiff() {\n            this.unifiedResult = this.diff();\n            this.splitedLeft = [];\n            this.splitedRight = [];\n            if (this.unifiedResult.length) {\n                const {left, right} = this.splitDiffResult(this.unifiedResult);\n                this.adaptSplitResult(left, right);\n            }\n        },\n        diff() {\n            // 修改\n            if (this.newContent && this.oldContent) {\n                const diffs = diffLines(this.oldContent, this.newContent, {\n                    ignoreWhitespace: false\n                });\n                const length = diffs.length;\n                return diffs.map((chunk, index) => {\n                    const type = chunk.added ? 'add' : (chunk.removed ? 'remove' : '');\n                    // delete last element of array, because split will produce more one line.\n                    let lines = chunk.value.split('\\n');\n                    lines = index === length - 1 ? lines.slice(0) : lines.slice(0, -1);\n                    return {\n                        type,\n                        lines,\n                        lineCount: lines.length,\n                        collapse: !type && lines.length > this.collapse\n                    };\n                });\n            }\n            else if (this.newContent || this.oldContent) {\n                // 新增 or 删除\n                const diffs = this.newContent || this.oldContent;\n                const lines = diffs.split('\\n');\n                const type = !this.newContent ? 'remove' : (!this.oldContent ? 'add' : '');\n\n                return [{\n                    type,\n                    lines,\n                    lineCount: lines.length,\n                    startCount: 1\n                }];\n            }\n            return [];\n        },\n\n        /**\n         * 由于 diff库返回的结果是 chunk list非双边对比结果，所以这里做了处理\n         *  1. 新增块放入右侧，如果下一块为删除块则视为更改代码，此时左侧需补充空行。\n         *  2. 删除块放入左侧，如果下一块为新增块则视为更改代码, 此时右侧补充空行。\n         *  3. 无变化块，两边都需放入。\n         *\n         * @param {Array} diffResult diff库调用返回的结果\n         * @return {Object} {left, right} 左右分离结果\n        */\n        splitDiffResult(diffResult) {\n            const left = {\n                chunks: [],\n                lineCount: 1\n            };\n            const right = {\n                chunks: [],\n                lineCount: 1\n            };\n            const setChunkLineNumber = (chunk, lineNumer) => {\n                chunk.startLineNumber = lineNumer;\n                return lineNumer + chunk.lineCount;\n            };\n\n            diffResult.forEach((chunk, index) => {\n                if (chunk.type === 'add') {\n                    right.lineCount = setChunkLineNumber(chunk, right.lineCount);\n                    right.chunks.push(chunk);\n                    // 判断是否增加空白块\n                    if (this.shouldSetBlank(chunk.type, index)) {\n                        left.chunks.push(this.createBlankChunk(chunk.lineCount));\n                    }\n                }\n                else if (chunk.type === 'remove') {\n                    left.lineCount = setChunkLineNumber(chunk, left.lineCount);\n                    left.chunks.push(chunk);\n                    // 判断是否增加空白块\n                    if (this.shouldSetBlank(chunk.type, index)) {\n                        right.chunks.push(this.createBlankChunk(chunk.lineCount));\n                    }\n                }\n                else {\n                    // 没有变动，两边放入。\n                    left.lineCount = setChunkLineNumber(chunk, left.lineCount);\n                    left.chunks.push(chunk);\n\n                    const clonedChunk = {...chunk};\n                    right.lineCount = setChunkLineNumber(clonedChunk, right.lineCount);\n                    right.chunks.push(clonedChunk);\n                }\n            });\n            return {left, right};\n        },\n        adaptSplitResult(left, right) {\n            left.chunks.forEach((leftChunk, index) => {\n                const rightChunk = right.chunks[index];\n                if (leftChunk.collapse && rightChunk.collapse) {\n                    // 记录下左右栏chunk index; 点击展开时，通过此index定位chunk进行展开。\n                    leftChunk.leftIndex = rightChunk.leftIndex = this.splitedLeft.length;\n                    leftChunk.rightIndex = rightChunk.rightIndex = this.splitedRight.length;\n                }\n\n                this.splitedLeft.push(leftChunk);\n                this.splitedRight.push(rightChunk);\n\n                // 修改的行数不一致时，补充空白块。例如：左栏删除 3行，右栏添加5行代码。则左栏需补充 2行空白，进行对齐。\n                if (leftChunk.type === 'remove' && rightChunk.type === 'add') {\n                    const count = leftChunk.lineCount - rightChunk.lineCount;\n                    if (count < 0) {\n                        this.splitedLeft.push(this.createBlankChunk(Math.abs(count)));\n                    }\n                    else if (count > 0) {\n                        this.splitedRight.push(this.createBlankChunk(count));\n                    }\n                }\n            });\n        },\n\n        /**\n         * 是否应该设置空白块：\n         *    1. 最后一块返回 true\n         *    2. 当前块是‘remove'类型，看下一块类型是否为空（没有变化）\n         *    3. 当前块是‘add'类型，看上一块类型是否为空(没有变化)\n         *\n         * @param {type} type 当前块类型\n         * @param {inddex} index 当前块索引\n         * @return {boolean}\n         */\n        shouldSetBlank(type, index) {\n            if (index === this.unifiedResult.length - 1) {\n                return true;\n            }\n            index = type === 'remove' ? index + 1 : index - 1;\n\n            const chunk = this.unifiedResult[index];\n            return !chunk || !chunk.type;\n        },\n\n        /**\n         * 创建空白块\n         *\n         * @param {number} lineCount 行数\n         * @return {Object} 空白块对象\n         */\n        createBlankChunk(lineCount) {\n            return {\n                type: 'blank',\n                lineCount,\n                lines: new Array(lineCount).fill(' ')\n            };\n        },\n        expandChunk(leftIndex, rightIndex) {\n            this.splitedLeft[leftIndex].collapse = false;\n            this.splitedRight[rightIndex].collapse = false;\n        }\n    }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.diff-viewer {\n    font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace, sans-serif;\n    font-size: 12px;\n    margin-bottom: 15px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n\n    h3 {\n        box-sizing: border-box;\n        margin: 0;\n        padding: 5px 10px;\n        height: 40px;\n        line-height: 30px;\n        border-radius: 5px 5px 0 0;\n        border-bottom: 1px solid #dbdbdb;\n        background-color: #f7f7f7;\n        color: #333;\n        font-weight: 600;\n    }\n\n    .container {\n        display: flex;\n        > div {\n            width: 50%;\n        }\n    }\n}\n</style>\n"]}]}