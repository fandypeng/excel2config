// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sheet.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExcelListReq struct {
	LastTime             int64    `protobuf:"varint,1,opt,name=lastTime,proto3" json:"lastTime,omitempty" form:"last_time"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit"`
	GroupId              string   `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty" form:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExcelListReq) Reset()         { *m = ExcelListReq{} }
func (m *ExcelListReq) String() string { return proto.CompactTextString(m) }
func (*ExcelListReq) ProtoMessage()    {}
func (*ExcelListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{0}
}
func (m *ExcelListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExcelListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExcelListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExcelListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExcelListReq.Merge(m, src)
}
func (m *ExcelListReq) XXX_Size() int {
	return m.Size()
}
func (m *ExcelListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExcelListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExcelListReq proto.InternalMessageInfo

type SimpleExcel struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	CreateTime           int64    `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty" bson:"create_time"`
	EditTime             int64    `protobuf:"varint,4,opt,name=editTime,proto3" json:"editTime,omitempty" bson:"edit_time"`
	Owner                string   `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty" bson:"owner"`
	Remark               string   `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty" bson:"remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleExcel) Reset()         { *m = SimpleExcel{} }
func (m *SimpleExcel) String() string { return proto.CompactTextString(m) }
func (*SimpleExcel) ProtoMessage()    {}
func (*SimpleExcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{1}
}
func (m *SimpleExcel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleExcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleExcel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleExcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleExcel.Merge(m, src)
}
func (m *SimpleExcel) XXX_Size() int {
	return m.Size()
}
func (m *SimpleExcel) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleExcel.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleExcel proto.InternalMessageInfo

type ExcelListResp struct {
	List                 []*SimpleExcel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExcelListResp) Reset()         { *m = ExcelListResp{} }
func (m *ExcelListResp) String() string { return proto.CompactTextString(m) }
func (*ExcelListResp) ProtoMessage()    {}
func (*ExcelListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{2}
}
func (m *ExcelListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExcelListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExcelListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExcelListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExcelListResp.Merge(m, src)
}
func (m *ExcelListResp) XXX_Size() int {
	return m.Size()
}
func (m *ExcelListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExcelListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ExcelListResp proto.InternalMessageInfo

type CreateExcelReq struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" form:"name" validate:"required"`
	Remark               string   `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty" form:"remark"`
	GroupId              string   `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty" form:"group_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateExcelReq) Reset()         { *m = CreateExcelReq{} }
func (m *CreateExcelReq) String() string { return proto.CompactTextString(m) }
func (*CreateExcelReq) ProtoMessage()    {}
func (*CreateExcelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{3}
}
func (m *CreateExcelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateExcelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateExcelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateExcelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExcelReq.Merge(m, src)
}
func (m *CreateExcelReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateExcelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExcelReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExcelReq proto.InternalMessageInfo

type CreateExcelResp struct {
	Eid                  string   `protobuf:"bytes,1,opt,name=eid,proto3" json:"eid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateExcelResp) Reset()         { *m = CreateExcelResp{} }
func (m *CreateExcelResp) String() string { return proto.CompactTextString(m) }
func (*CreateExcelResp) ProtoMessage()    {}
func (*CreateExcelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{4}
}
func (m *CreateExcelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateExcelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateExcelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateExcelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExcelResp.Merge(m, src)
}
func (m *CreateExcelResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateExcelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExcelResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExcelResp proto.InternalMessageInfo

type LoadExcelReq struct {
	GridKey              string   `protobuf:"bytes,1,opt,name=gridKey,proto3" json:"gridKey,omitempty" form:"gridKey" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadExcelReq) Reset()         { *m = LoadExcelReq{} }
func (m *LoadExcelReq) String() string { return proto.CompactTextString(m) }
func (*LoadExcelReq) ProtoMessage()    {}
func (*LoadExcelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{5}
}
func (m *LoadExcelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadExcelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadExcelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadExcelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadExcelReq.Merge(m, src)
}
func (m *LoadExcelReq) XXX_Size() int {
	return m.Size()
}
func (m *LoadExcelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadExcelReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoadExcelReq proto.InternalMessageInfo

type LoadExcelResp struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadExcelResp) Reset()         { *m = LoadExcelResp{} }
func (m *LoadExcelResp) String() string { return proto.CompactTextString(m) }
func (*LoadExcelResp) ProtoMessage()    {}
func (*LoadExcelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{6}
}
func (m *LoadExcelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadExcelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadExcelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadExcelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadExcelResp.Merge(m, src)
}
func (m *LoadExcelResp) XXX_Size() int {
	return m.Size()
}
func (m *LoadExcelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadExcelResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoadExcelResp proto.InternalMessageInfo

type LoadExcelSheetReq struct {
	GridKey              string   `protobuf:"bytes,1,opt,name=gridKey,proto3" json:"gridKey,omitempty" form:"gridKey" validate:"required"`
	Indexs               string   `protobuf:"bytes,2,opt,name=indexs,proto3" json:"indexs,omitempty" form:"index"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadExcelSheetReq) Reset()         { *m = LoadExcelSheetReq{} }
func (m *LoadExcelSheetReq) String() string { return proto.CompactTextString(m) }
func (*LoadExcelSheetReq) ProtoMessage()    {}
func (*LoadExcelSheetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{7}
}
func (m *LoadExcelSheetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadExcelSheetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadExcelSheetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadExcelSheetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadExcelSheetReq.Merge(m, src)
}
func (m *LoadExcelSheetReq) XXX_Size() int {
	return m.Size()
}
func (m *LoadExcelSheetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadExcelSheetReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoadExcelSheetReq proto.InternalMessageInfo

type LoadExcelSheetResp struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadExcelSheetResp) Reset()         { *m = LoadExcelSheetResp{} }
func (m *LoadExcelSheetResp) String() string { return proto.CompactTextString(m) }
func (*LoadExcelSheetResp) ProtoMessage()    {}
func (*LoadExcelSheetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{8}
}
func (m *LoadExcelSheetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadExcelSheetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadExcelSheetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadExcelSheetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadExcelSheetResp.Merge(m, src)
}
func (m *LoadExcelSheetResp) XXX_Size() int {
	return m.Size()
}
func (m *LoadExcelSheetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadExcelSheetResp.DiscardUnknown(m)
}

var xxx_messageInfo_LoadExcelSheetResp proto.InternalMessageInfo

type UpdateExcelReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	Remark               string   `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty" form:"remark" validate:"required"`
	Contributers         []string `protobuf:"bytes,3,rep,name=contributers,proto3" json:"contributers,omitempty" form:"contributers"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateExcelReq) Reset()         { *m = UpdateExcelReq{} }
func (m *UpdateExcelReq) String() string { return proto.CompactTextString(m) }
func (*UpdateExcelReq) ProtoMessage()    {}
func (*UpdateExcelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{9}
}
func (m *UpdateExcelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateExcelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateExcelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateExcelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExcelReq.Merge(m, src)
}
func (m *UpdateExcelReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateExcelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExcelReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExcelReq proto.InternalMessageInfo

type UpdateExcelResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateExcelResp) Reset()         { *m = UpdateExcelResp{} }
func (m *UpdateExcelResp) String() string { return proto.CompactTextString(m) }
func (*UpdateExcelResp) ProtoMessage()    {}
func (*UpdateExcelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{10}
}
func (m *UpdateExcelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateExcelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateExcelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateExcelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExcelResp.Merge(m, src)
}
func (m *UpdateExcelResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateExcelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExcelResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExcelResp proto.InternalMessageInfo

type DeleteExcelReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" form:"name" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteExcelReq) Reset()         { *m = DeleteExcelReq{} }
func (m *DeleteExcelReq) String() string { return proto.CompactTextString(m) }
func (*DeleteExcelReq) ProtoMessage()    {}
func (*DeleteExcelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{11}
}
func (m *DeleteExcelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteExcelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteExcelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteExcelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExcelReq.Merge(m, src)
}
func (m *DeleteExcelReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteExcelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExcelReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExcelReq proto.InternalMessageInfo

type DeleteExcelResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteExcelResp) Reset()         { *m = DeleteExcelResp{} }
func (m *DeleteExcelResp) String() string { return proto.CompactTextString(m) }
func (*DeleteExcelResp) ProtoMessage()    {}
func (*DeleteExcelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{12}
}
func (m *DeleteExcelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteExcelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteExcelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteExcelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExcelResp.Merge(m, src)
}
func (m *DeleteExcelResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteExcelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExcelResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExcelResp proto.InternalMessageInfo

type ExportExcelReq struct {
	GridKey              string   `protobuf:"bytes,1,opt,name=gridKey,proto3" json:"gridKey,omitempty" form:"gridKey" validate:"required"`
	SheetName            string   `protobuf:"bytes,2,opt,name=sheetName,proto3" json:"sheetName,omitempty" form:"sheetName" validate:"required"`
	Format               string   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty" form:"format" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportExcelReq) Reset()         { *m = ExportExcelReq{} }
func (m *ExportExcelReq) String() string { return proto.CompactTextString(m) }
func (*ExportExcelReq) ProtoMessage()    {}
func (*ExportExcelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{13}
}
func (m *ExportExcelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportExcelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportExcelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportExcelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportExcelReq.Merge(m, src)
}
func (m *ExportExcelReq) XXX_Size() int {
	return m.Size()
}
func (m *ExportExcelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportExcelReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExportExcelReq proto.InternalMessageInfo

type ExportExcelResp struct {
	Jsonstr              string   `protobuf:"bytes,1,opt,name=jsonstr,proto3" json:"jsonstr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportExcelResp) Reset()         { *m = ExportExcelResp{} }
func (m *ExportExcelResp) String() string { return proto.CompactTextString(m) }
func (*ExportExcelResp) ProtoMessage()    {}
func (*ExportExcelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{14}
}
func (m *ExportExcelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportExcelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportExcelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportExcelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportExcelResp.Merge(m, src)
}
func (m *ExportExcelResp) XXX_Size() int {
	return m.Size()
}
func (m *ExportExcelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportExcelResp.DiscardUnknown(m)
}

var xxx_messageInfo_ExportExcelResp proto.InternalMessageInfo

type ExportProdExcelReq struct {
	GridKey              string   `protobuf:"bytes,1,opt,name=gridKey,proto3" json:"gridKey,omitempty" form:"gridKey" validate:"required"`
	SheetName            string   `protobuf:"bytes,2,opt,name=sheetName,proto3" json:"sheetName,omitempty" form:"sheetName" validate:"required"`
	Format               string   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty" form:"format" validate:"required"`
	Gid                  string   `protobuf:"bytes,4,opt,name=gid,proto3" json:"gid,omitempty" form:"gid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportProdExcelReq) Reset()         { *m = ExportProdExcelReq{} }
func (m *ExportProdExcelReq) String() string { return proto.CompactTextString(m) }
func (*ExportProdExcelReq) ProtoMessage()    {}
func (*ExportProdExcelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{15}
}
func (m *ExportProdExcelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportProdExcelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportProdExcelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportProdExcelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportProdExcelReq.Merge(m, src)
}
func (m *ExportProdExcelReq) XXX_Size() int {
	return m.Size()
}
func (m *ExportProdExcelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportProdExcelReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExportProdExcelReq proto.InternalMessageInfo

type ExportProdExcelResp struct {
	Jsonstr              string   `protobuf:"bytes,1,opt,name=jsonstr,proto3" json:"jsonstr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExportProdExcelResp) Reset()         { *m = ExportProdExcelResp{} }
func (m *ExportProdExcelResp) String() string { return proto.CompactTextString(m) }
func (*ExportProdExcelResp) ProtoMessage()    {}
func (*ExportProdExcelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{16}
}
func (m *ExportProdExcelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExportProdExcelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExportProdExcelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExportProdExcelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportProdExcelResp.Merge(m, src)
}
func (m *ExportProdExcelResp) XXX_Size() int {
	return m.Size()
}
func (m *ExportProdExcelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportProdExcelResp.DiscardUnknown(m)
}

var xxx_messageInfo_ExportProdExcelResp proto.InternalMessageInfo

type SheetListReq struct {
	GridKey              string   `protobuf:"bytes,1,opt,name=gridKey,proto3" json:"gridKey,omitempty" form:"gridKey" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SheetListReq) Reset()         { *m = SheetListReq{} }
func (m *SheetListReq) String() string { return proto.CompactTextString(m) }
func (*SheetListReq) ProtoMessage()    {}
func (*SheetListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{17}
}
func (m *SheetListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SheetListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SheetListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SheetListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SheetListReq.Merge(m, src)
}
func (m *SheetListReq) XXX_Size() int {
	return m.Size()
}
func (m *SheetListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SheetListReq.DiscardUnknown(m)
}

var xxx_messageInfo_SheetListReq proto.InternalMessageInfo

type SheetListResp struct {
	SheetName            []string `protobuf:"bytes,1,rep,name=sheetName,proto3" json:"sheetName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SheetListResp) Reset()         { *m = SheetListResp{} }
func (m *SheetListResp) String() string { return proto.CompactTextString(m) }
func (*SheetListResp) ProtoMessage()    {}
func (*SheetListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2edb8d084c32530c, []int{18}
}
func (m *SheetListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SheetListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SheetListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SheetListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SheetListResp.Merge(m, src)
}
func (m *SheetListResp) XXX_Size() int {
	return m.Size()
}
func (m *SheetListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SheetListResp.DiscardUnknown(m)
}

var xxx_messageInfo_SheetListResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExcelListReq)(nil), "sheet.service.v1.ExcelListReq")
	proto.RegisterType((*SimpleExcel)(nil), "sheet.service.v1.SimpleExcel")
	proto.RegisterType((*ExcelListResp)(nil), "sheet.service.v1.ExcelListResp")
	proto.RegisterType((*CreateExcelReq)(nil), "sheet.service.v1.CreateExcelReq")
	proto.RegisterType((*CreateExcelResp)(nil), "sheet.service.v1.CreateExcelResp")
	proto.RegisterType((*LoadExcelReq)(nil), "sheet.service.v1.LoadExcelReq")
	proto.RegisterType((*LoadExcelResp)(nil), "sheet.service.v1.LoadExcelResp")
	proto.RegisterType((*LoadExcelSheetReq)(nil), "sheet.service.v1.LoadExcelSheetReq")
	proto.RegisterType((*LoadExcelSheetResp)(nil), "sheet.service.v1.LoadExcelSheetResp")
	proto.RegisterType((*UpdateExcelReq)(nil), "sheet.service.v1.UpdateExcelReq")
	proto.RegisterType((*UpdateExcelResp)(nil), "sheet.service.v1.UpdateExcelResp")
	proto.RegisterType((*DeleteExcelReq)(nil), "sheet.service.v1.DeleteExcelReq")
	proto.RegisterType((*DeleteExcelResp)(nil), "sheet.service.v1.DeleteExcelResp")
	proto.RegisterType((*ExportExcelReq)(nil), "sheet.service.v1.ExportExcelReq")
	proto.RegisterType((*ExportExcelResp)(nil), "sheet.service.v1.ExportExcelResp")
	proto.RegisterType((*ExportProdExcelReq)(nil), "sheet.service.v1.ExportProdExcelReq")
	proto.RegisterType((*ExportProdExcelResp)(nil), "sheet.service.v1.ExportProdExcelResp")
	proto.RegisterType((*SheetListReq)(nil), "sheet.service.v1.SheetListReq")
	proto.RegisterType((*SheetListResp)(nil), "sheet.service.v1.SheetListResp")
}

func init() { proto.RegisterFile("sheet.proto", fileDescriptor_2edb8d084c32530c) }

var fileDescriptor_2edb8d084c32530c = []byte{
	// 1083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0x7a, 0xf3, 0x07, 0x3f, 0xff, 0x49, 0x32, 0xa9, 0xc0, 0xb5, 0x5a, 0xaf, 0x33, 0x49,
	0x2b, 0x57, 0x28, 0x36, 0x29, 0x08, 0xa4, 0x22, 0x24, 0x64, 0x28, 0x12, 0xa2, 0x42, 0xd1, 0x16,
	0x2e, 0x70, 0x08, 0x1b, 0xef, 0xc4, 0x19, 0xb0, 0x77, 0x26, 0x3b, 0xeb, 0x90, 0x4a, 0x48, 0x48,
	0x7c, 0x01, 0x0e, 0x3d, 0xc0, 0xb7, 0xe1, 0xc0, 0xa5, 0x47, 0x24, 0x4e, 0x5c, 0x56, 0x10, 0xf8,
	0x04, 0xfb, 0x09, 0xd0, 0xcc, 0xec, 0xae, 0x67, 0x9d, 0x4d, 0x5a, 0xd1, 0x9e, 0xb8, 0x65, 0xe7,
	0xfd, 0x66, 0x7e, 0xef, 0xfd, 0xde, 0x9b, 0xdf, 0x38, 0x50, 0x13, 0xc7, 0x84, 0x44, 0x7d, 0x1e,
	0xb2, 0x88, 0xa1, 0x75, 0xfd, 0x21, 0x48, 0x78, 0x4a, 0x47, 0xa4, 0x7f, 0xba, 0xd7, 0xde, 0x1d,
	0xd3, 0xe8, 0x78, 0x76, 0xd8, 0x1f, 0xb1, 0xe9, 0x60, 0xcc, 0xc6, 0x6c, 0xa0, 0x80, 0x87, 0xb3,
	0x23, 0xf5, 0xa5, 0x3e, 0xd4, 0x5f, 0xfa, 0x80, 0xf6, 0xcd, 0x31, 0x63, 0xe3, 0x09, 0x19, 0x78,
	0x9c, 0x0e, 0xbc, 0x20, 0x60, 0x91, 0x17, 0x51, 0x16, 0x88, 0x34, 0xda, 0x4d, 0xa3, 0xf9, 0x19,
	0x3e, 0x11, 0xa3, 0x90, 0xf2, 0x88, 0x85, 0x1a, 0x81, 0x7f, 0xb2, 0xa0, 0xfe, 0xe0, 0x6c, 0x44,
	0x26, 0x0f, 0xa9, 0x88, 0x5c, 0x72, 0x82, 0xde, 0x80, 0x57, 0x26, 0x9e, 0x88, 0x3e, 0xa3, 0x53,
	0xd2, 0xb2, 0xba, 0x56, 0xcf, 0x1e, 0x5e, 0x4f, 0x62, 0x67, 0xfd, 0x88, 0x85, 0xd3, 0xfb, 0x58,
	0x46, 0x0e, 0x22, 0x3a, 0x25, 0xd8, 0xcd, 0x51, 0xe8, 0x0e, 0x2c, 0x4f, 0xe8, 0x94, 0x46, 0xad,
	0x8a, 0x82, 0xaf, 0x27, 0xb1, 0x53, 0x4f, 0xe1, 0x72, 0x19, 0xbb, 0x3a, 0x8c, 0x76, 0x61, 0x75,
	0x1c, 0xb2, 0x19, 0xff, 0xd8, 0x6f, 0xd9, 0x5d, 0xab, 0x57, 0x1d, 0x6e, 0x26, 0xb1, 0xb3, 0xa6,
	0x91, 0x2a, 0x70, 0x40, 0x7d, 0xec, 0x66, 0x18, 0xfc, 0x63, 0x05, 0x6a, 0x8f, 0xe8, 0x94, 0x4f,
	0x88, 0xca, 0x0f, 0x75, 0xa0, 0x42, 0x7d, 0x95, 0x52, 0x75, 0xd8, 0x4c, 0x62, 0x07, 0x0e, 0x05,
	0x0b, 0xee, 0x63, 0xb5, 0xa9, 0x42, 0x7d, 0xb4, 0x0d, 0x4b, 0x81, 0x37, 0x25, 0x2a, 0x8b, 0xea,
	0x70, 0x2d, 0x89, 0x9d, 0x9a, 0x46, 0xc8, 0x55, 0xec, 0xaa, 0x20, 0x7a, 0x1b, 0x60, 0x14, 0x12,
	0x2f, 0x22, 0xaa, 0x3e, 0x5b, 0x25, 0xfc, 0x6a, 0x12, 0x3b, 0x48, 0x43, 0x75, 0x2c, 0xad, 0xd0,
	0x40, 0x4a, 0x55, 0x88, 0x4f, 0xb5, 0x2a, 0x4b, 0x73, 0x55, 0xf4, 0x2e, 0x19, 0xc9, 0x54, 0xc9,
	0x50, 0x52, 0x15, 0xf6, 0x6d, 0x40, 0xc2, 0xd6, 0xb2, 0xca, 0x47, 0xa9, 0xa2, 0xe1, 0x6a, 0x19,
	0xbb, 0x3a, 0x8c, 0xee, 0xc2, 0x4a, 0x48, 0xa6, 0x5e, 0xf8, 0x4d, 0x6b, 0x45, 0x01, 0x37, 0x92,
	0xd8, 0x69, 0x68, 0xa0, 0x5e, 0xc7, 0x6e, 0x0a, 0xc0, 0x43, 0x68, 0x18, 0xad, 0x12, 0x1c, 0xed,
	0xc1, 0xd2, 0x84, 0x8a, 0xa8, 0x65, 0x75, 0xed, 0x5e, 0xed, 0xde, 0xad, 0xfe, 0xe2, 0x30, 0xf5,
	0x0d, 0xfd, 0x5c, 0x05, 0xc5, 0x7f, 0x58, 0xd0, 0xfc, 0x40, 0xd5, 0xa5, 0x57, 0xc9, 0x09, 0x7a,
	0x0b, 0xec, 0x59, 0xae, 0x2c, 0x4e, 0x62, 0xa7, 0xa3, 0x7b, 0x32, 0xa3, 0x3e, 0xee, 0x9e, 0x7a,
	0x13, 0xea, 0x7b, 0x11, 0x91, 0xd9, 0x9c, 0xcc, 0x68, 0x48, 0x7c, 0xec, 0x4a, 0x38, 0x7a, 0xa7,
	0x20, 0xf7, 0x76, 0x12, 0x3b, 0x8e, 0xde, 0xa6, 0xe4, 0x2e, 0xdd, 0xa7, 0x5b, 0x30, 0x2f, 0xd8,
	0x9e, 0x17, 0xac, 0xb7, 0x2e, 0x14, 0x6c, 0x4e, 0xcc, 0xd2, 0x73, 0x4c, 0xcc, 0x36, 0xac, 0x15,
	0x4a, 0x13, 0x1c, 0xad, 0x83, 0x4d, 0xb2, 0xda, 0x5c, 0xf9, 0x27, 0xde, 0x87, 0xfa, 0x43, 0xe6,
	0xf9, 0x79, 0xf5, 0xef, 0x4b, 0x0e, 0xea, 0x7f, 0x42, 0x1e, 0xa7, 0x0a, 0xdc, 0x49, 0x62, 0x07,
	0x67, 0x1c, 0x2a, 0x50, 0x5e, 0x4d, 0xb6, 0x0d, 0xdf, 0x85, 0x86, 0x71, 0xa2, 0xe0, 0xa8, 0x05,
	0xab, 0x23, 0x16, 0x44, 0x24, 0x88, 0x52, 0xe2, 0xec, 0x13, 0x7f, 0x0f, 0x1b, 0x39, 0xf4, 0x91,
	0x6c, 0xd6, 0x4b, 0xc9, 0x00, 0xf5, 0x60, 0x85, 0x06, 0x3e, 0x39, 0x13, 0x69, 0x37, 0x8c, 0x2b,
	0xa8, 0xd6, 0xb1, 0x9b, 0xc6, 0x71, 0x1f, 0xd0, 0x62, 0x02, 0x57, 0x26, 0xfc, 0x8b, 0x05, 0xcd,
	0xcf, 0xb9, 0x6f, 0x8e, 0xcb, 0x9e, 0x71, 0x0f, 0xb7, 0x92, 0xd8, 0xb9, 0x95, 0x12, 0x5d, 0x32,
	0x2c, 0xf2, 0x6a, 0xbe, 0x97, 0xb7, 0x5c, 0xe7, 0x77, 0x3b, 0x89, 0x9d, 0xad, 0x42, 0xcb, 0x4b,
	0xb7, 0x66, 0x63, 0xf0, 0x2e, 0xd4, 0x65, 0x3e, 0x21, 0x3d, 0x9c, 0x45, 0x24, 0x14, 0x2d, 0xbb,
	0x6b, 0xf7, 0xaa, 0xc3, 0xd7, 0x92, 0xd8, 0xd9, 0xd4, 0x87, 0x98, 0x51, 0xec, 0x16, 0xc0, 0x78,
	0x03, 0xd6, 0x0a, 0x05, 0x08, 0x8e, 0xbf, 0x83, 0xe6, 0x87, 0x64, 0x42, 0x5e, 0xac, 0xa6, 0xff,
	0x3a, 0xff, 0x32, 0xa1, 0x02, 0xbb, 0xe0, 0xea, 0x52, 0x3e, 0x38, 0xe3, 0x2c, 0x8c, 0x5e, 0xde,
	0x58, 0xa2, 0x8f, 0xa0, 0xaa, 0xfc, 0xe0, 0xd3, 0x79, 0x96, 0xbd, 0x24, 0x76, 0x76, 0xf4, 0x19,
	0x79, 0xa8, 0xfc, 0x94, 0xf9, 0x56, 0xd9, 0x3c, 0xb9, 0xc5, 0x8b, 0xd2, 0xfb, 0x6a, 0x34, 0x4f,
	0xaf, 0x5f, 0xd2, 0xbc, 0x34, 0xf8, 0x3a, 0xac, 0x15, 0x4a, 0xd3, 0xe3, 0xf6, 0xb5, 0x60, 0x81,
	0x88, 0xc2, 0x6c, 0xdc, 0xd2, 0x4f, 0xfc, 0xa4, 0x02, 0x48, 0xa3, 0xf7, 0x43, 0xe6, 0xff, 0xef,
	0xc4, 0x90, 0x56, 0x3b, 0xa6, 0x99, 0x99, 0x19, 0x56, 0x3b, 0xbe, 0xd4, 0x6a, 0x65, 0x64, 0x00,
	0x9b, 0x17, 0x44, 0xb9, 0x52, 0xc6, 0x7d, 0xa8, 0xab, 0xcb, 0x9d, 0xbd, 0xe9, 0x2f, 0xee, 0x71,
	0xbb, 0xd0, 0x30, 0x4e, 0x14, 0x1c, 0xdd, 0x34, 0x05, 0x95, 0xef, 0x4f, 0xd5, 0x90, 0xe9, 0xde,
	0xaf, 0xab, 0xb0, 0xac, 0xf0, 0xe8, 0x2b, 0xa8, 0xe6, 0x6f, 0x16, 0xea, 0x5c, 0x7c, 0xa1, 0xcc,
	0xdf, 0x1e, 0x6d, 0xe7, 0xca, 0xb8, 0xe0, 0x18, 0xfd, 0xf0, 0xfb, 0x3f, 0x4f, 0x2a, 0x75, 0x04,
	0x44, 0x2e, 0x0f, 0xe4, 0x8b, 0x86, 0x8e, 0xa1, 0x66, 0xb8, 0x3e, 0xea, 0x5e, 0x3c, 0xa3, 0xf8,
	0xde, 0xb5, 0xb7, 0x9e, 0x81, 0x10, 0x1c, 0x5f, 0x57, 0x3c, 0x4d, 0x5c, 0xd7, 0x3c, 0xfa, 0x87,
	0x00, 0xfa, 0x12, 0xaa, 0xb9, 0x79, 0x96, 0xd5, 0x62, 0xbe, 0x2b, 0x65, 0xb5, 0x14, 0x5e, 0x09,
	0xdc, 0x50, 0x1c, 0xab, 0x78, 0x59, 0x71, 0x20, 0x0e, 0xcd, 0xa2, 0x33, 0xa3, 0xed, 0x2b, 0x4e,
	0xc8, 0x1e, 0x8f, 0xf6, 0xce, 0xb3, 0x41, 0x82, 0xe3, 0x4d, 0xc5, 0xd5, 0xc0, 0x35, 0x5d, 0x8f,
	0xda, 0x22, 0x85, 0x33, 0x9c, 0xb1, 0x4c, 0xb8, 0xa2, 0xf3, 0x97, 0x09, 0xb7, 0x68, 0xad, 0x0b,
	0xc2, 0xcd, 0x54, 0x58, 0x32, 0x19, 0x96, 0x57, 0xc6, 0x54, 0xf4, 0xe3, 0x32, 0xa6, 0x45, 0xcf,
	0x5c, 0x60, 0xf2, 0x55, 0x58, 0x32, 0x19, 0x6e, 0x53, 0xc6, 0x54, 0xf4, 0xd9, 0x32, 0xa6, 0x05,
	0xbb, 0x5a, 0x64, 0x22, 0x2a, 0x8c, 0x8e, 0xa0, 0x9a, 0xdf, 0x88, 0xb2, 0x61, 0x30, 0x2f, 0x60,
	0xd9, 0x30, 0x14, 0xae, 0x13, 0x6e, 0x29, 0x0e, 0x84, 0xd7, 0x8d, 0x06, 0x1d, 0xa8, 0xf1, 0x7e,
	0x9c, 0xf9, 0x67, 0x7e, 0xf9, 0xd1, 0xce, 0x65, 0x39, 0x9b, 0xa6, 0xd9, 0xbe, 0xfd, 0x1c, 0x28,
	0xc1, 0xf1, 0x0d, 0xc5, 0xbc, 0x89, 0x37, 0xcc, 0xea, 0x0e, 0x78, 0xc8, 0xfc, 0xe1, 0x8d, 0xa7,
	0x7f, 0x75, 0xae, 0x3d, 0x3d, 0xef, 0x58, 0xbf, 0x9d, 0x77, 0xac, 0x3f, 0xcf, 0x3b, 0xd6, 0xcf,
	0x7f, 0x77, 0xae, 0x7d, 0x61, 0x7b, 0x9c, 0x1e, 0xae, 0xa8, 0xff, 0x1e, 0xde, 0xfc, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x45, 0x14, 0x3f, 0x03, 0xcd, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SheetClient is the client API for Sheet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SheetClient interface {
	ExcelList(ctx context.Context, in *ExcelListReq, opts ...grpc.CallOption) (*ExcelListResp, error)
	CreateExcel(ctx context.Context, in *CreateExcelReq, opts ...grpc.CallOption) (*CreateExcelResp, error)
	LoadExcel(ctx context.Context, in *LoadExcelReq, opts ...grpc.CallOption) (*LoadExcelResp, error)
	LoadExcelSheet(ctx context.Context, in *LoadExcelSheetReq, opts ...grpc.CallOption) (*LoadExcelSheetResp, error)
	UpdateExcel(ctx context.Context, in *UpdateExcelReq, opts ...grpc.CallOption) (*UpdateExcelResp, error)
	DeleteExcel(ctx context.Context, in *DeleteExcelReq, opts ...grpc.CallOption) (*DeleteExcelResp, error)
	ExportExcel(ctx context.Context, in *ExportExcelReq, opts ...grpc.CallOption) (*ExportExcelResp, error)
	SheetList(ctx context.Context, in *SheetListReq, opts ...grpc.CallOption) (*SheetListResp, error)
	ExportProdExcel(ctx context.Context, in *ExportProdExcelReq, opts ...grpc.CallOption) (*ExportProdExcelResp, error)
}

type sheetClient struct {
	cc *grpc.ClientConn
}

func NewSheetClient(cc *grpc.ClientConn) SheetClient {
	return &sheetClient{cc}
}

func (c *sheetClient) ExcelList(ctx context.Context, in *ExcelListReq, opts ...grpc.CallOption) (*ExcelListResp, error) {
	out := new(ExcelListResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/ExcelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) CreateExcel(ctx context.Context, in *CreateExcelReq, opts ...grpc.CallOption) (*CreateExcelResp, error) {
	out := new(CreateExcelResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/CreateExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) LoadExcel(ctx context.Context, in *LoadExcelReq, opts ...grpc.CallOption) (*LoadExcelResp, error) {
	out := new(LoadExcelResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/LoadExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) LoadExcelSheet(ctx context.Context, in *LoadExcelSheetReq, opts ...grpc.CallOption) (*LoadExcelSheetResp, error) {
	out := new(LoadExcelSheetResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/LoadExcelSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) UpdateExcel(ctx context.Context, in *UpdateExcelReq, opts ...grpc.CallOption) (*UpdateExcelResp, error) {
	out := new(UpdateExcelResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/UpdateExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) DeleteExcel(ctx context.Context, in *DeleteExcelReq, opts ...grpc.CallOption) (*DeleteExcelResp, error) {
	out := new(DeleteExcelResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/DeleteExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) ExportExcel(ctx context.Context, in *ExportExcelReq, opts ...grpc.CallOption) (*ExportExcelResp, error) {
	out := new(ExportExcelResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/ExportExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) SheetList(ctx context.Context, in *SheetListReq, opts ...grpc.CallOption) (*SheetListResp, error) {
	out := new(SheetListResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/SheetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetClient) ExportProdExcel(ctx context.Context, in *ExportProdExcelReq, opts ...grpc.CallOption) (*ExportProdExcelResp, error) {
	out := new(ExportProdExcelResp)
	err := c.cc.Invoke(ctx, "/sheet.service.v1.Sheet/ExportProdExcel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SheetServer is the server API for Sheet service.
type SheetServer interface {
	ExcelList(context.Context, *ExcelListReq) (*ExcelListResp, error)
	CreateExcel(context.Context, *CreateExcelReq) (*CreateExcelResp, error)
	LoadExcel(context.Context, *LoadExcelReq) (*LoadExcelResp, error)
	LoadExcelSheet(context.Context, *LoadExcelSheetReq) (*LoadExcelSheetResp, error)
	UpdateExcel(context.Context, *UpdateExcelReq) (*UpdateExcelResp, error)
	DeleteExcel(context.Context, *DeleteExcelReq) (*DeleteExcelResp, error)
	ExportExcel(context.Context, *ExportExcelReq) (*ExportExcelResp, error)
	SheetList(context.Context, *SheetListReq) (*SheetListResp, error)
	ExportProdExcel(context.Context, *ExportProdExcelReq) (*ExportProdExcelResp, error)
}

// UnimplementedSheetServer can be embedded to have forward compatible implementations.
type UnimplementedSheetServer struct {
}

func (*UnimplementedSheetServer) ExcelList(ctx context.Context, req *ExcelListReq) (*ExcelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExcelList not implemented")
}
func (*UnimplementedSheetServer) CreateExcel(ctx context.Context, req *CreateExcelReq) (*CreateExcelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExcel not implemented")
}
func (*UnimplementedSheetServer) LoadExcel(ctx context.Context, req *LoadExcelReq) (*LoadExcelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadExcel not implemented")
}
func (*UnimplementedSheetServer) LoadExcelSheet(ctx context.Context, req *LoadExcelSheetReq) (*LoadExcelSheetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadExcelSheet not implemented")
}
func (*UnimplementedSheetServer) UpdateExcel(ctx context.Context, req *UpdateExcelReq) (*UpdateExcelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExcel not implemented")
}
func (*UnimplementedSheetServer) DeleteExcel(ctx context.Context, req *DeleteExcelReq) (*DeleteExcelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExcel not implemented")
}
func (*UnimplementedSheetServer) ExportExcel(ctx context.Context, req *ExportExcelReq) (*ExportExcelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportExcel not implemented")
}
func (*UnimplementedSheetServer) SheetList(ctx context.Context, req *SheetListReq) (*SheetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SheetList not implemented")
}
func (*UnimplementedSheetServer) ExportProdExcel(ctx context.Context, req *ExportProdExcelReq) (*ExportProdExcelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportProdExcel not implemented")
}

func RegisterSheetServer(s *grpc.Server, srv SheetServer) {
	s.RegisterService(&_Sheet_serviceDesc, srv)
}

func _Sheet_ExcelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).ExcelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/ExcelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).ExcelList(ctx, req.(*ExcelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_CreateExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExcelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).CreateExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/CreateExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).CreateExcel(ctx, req.(*CreateExcelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_LoadExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadExcelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).LoadExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/LoadExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).LoadExcel(ctx, req.(*LoadExcelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_LoadExcelSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadExcelSheetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).LoadExcelSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/LoadExcelSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).LoadExcelSheet(ctx, req.(*LoadExcelSheetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_UpdateExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExcelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).UpdateExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/UpdateExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).UpdateExcel(ctx, req.(*UpdateExcelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_DeleteExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExcelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).DeleteExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/DeleteExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).DeleteExcel(ctx, req.(*DeleteExcelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_ExportExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportExcelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).ExportExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/ExportExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).ExportExcel(ctx, req.(*ExportExcelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_SheetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SheetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).SheetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/SheetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).SheetList(ctx, req.(*SheetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sheet_ExportProdExcel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportProdExcelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServer).ExportProdExcel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheet.service.v1.Sheet/ExportProdExcel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServer).ExportProdExcel(ctx, req.(*ExportProdExcelReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sheet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sheet.service.v1.Sheet",
	HandlerType: (*SheetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExcelList",
			Handler:    _Sheet_ExcelList_Handler,
		},
		{
			MethodName: "CreateExcel",
			Handler:    _Sheet_CreateExcel_Handler,
		},
		{
			MethodName: "LoadExcel",
			Handler:    _Sheet_LoadExcel_Handler,
		},
		{
			MethodName: "LoadExcelSheet",
			Handler:    _Sheet_LoadExcelSheet_Handler,
		},
		{
			MethodName: "UpdateExcel",
			Handler:    _Sheet_UpdateExcel_Handler,
		},
		{
			MethodName: "DeleteExcel",
			Handler:    _Sheet_DeleteExcel_Handler,
		},
		{
			MethodName: "ExportExcel",
			Handler:    _Sheet_ExportExcel_Handler,
		},
		{
			MethodName: "SheetList",
			Handler:    _Sheet_SheetList_Handler,
		},
		{
			MethodName: "ExportProdExcel",
			Handler:    _Sheet_ExportProdExcel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sheet.proto",
}

func (m *ExcelListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExcelListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExcelListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintSheet(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.LastTime != 0 {
		i = encodeVarintSheet(dAtA, i, uint64(m.LastTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimpleExcel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleExcel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleExcel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EditTime != 0 {
		i = encodeVarintSheet(dAtA, i, uint64(m.EditTime))
		i--
		dAtA[i] = 0x20
	}
	if m.CreateTime != 0 {
		i = encodeVarintSheet(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExcelListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExcelListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExcelListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSheet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateExcelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateExcelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateExcelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateExcelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateExcelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateExcelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Eid) > 0 {
		i -= len(m.Eid)
		copy(dAtA[i:], m.Eid)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Eid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadExcelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadExcelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadExcelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GridKey) > 0 {
		i -= len(m.GridKey)
		copy(dAtA[i:], m.GridKey)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GridKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadExcelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadExcelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadExcelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadExcelSheetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadExcelSheetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadExcelSheetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Indexs) > 0 {
		i -= len(m.Indexs)
		copy(dAtA[i:], m.Indexs)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Indexs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GridKey) > 0 {
		i -= len(m.GridKey)
		copy(dAtA[i:], m.GridKey)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GridKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadExcelSheetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadExcelSheetResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadExcelSheetResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateExcelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExcelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateExcelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contributers) > 0 {
		for iNdEx := len(m.Contributers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contributers[iNdEx])
			copy(dAtA[i:], m.Contributers[iNdEx])
			i = encodeVarintSheet(dAtA, i, uint64(len(m.Contributers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateExcelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExcelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateExcelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DeleteExcelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExcelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteExcelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteExcelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExcelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteExcelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ExportExcelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportExcelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportExcelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SheetName) > 0 {
		i -= len(m.SheetName)
		copy(dAtA[i:], m.SheetName)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.SheetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GridKey) > 0 {
		i -= len(m.GridKey)
		copy(dAtA[i:], m.GridKey)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GridKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportExcelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportExcelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportExcelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Jsonstr) > 0 {
		i -= len(m.Jsonstr)
		copy(dAtA[i:], m.Jsonstr)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Jsonstr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportProdExcelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportProdExcelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportProdExcelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gid) > 0 {
		i -= len(m.Gid)
		copy(dAtA[i:], m.Gid)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Gid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SheetName) > 0 {
		i -= len(m.SheetName)
		copy(dAtA[i:], m.SheetName)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.SheetName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GridKey) > 0 {
		i -= len(m.GridKey)
		copy(dAtA[i:], m.GridKey)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GridKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExportProdExcelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExportProdExcelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExportProdExcelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Jsonstr) > 0 {
		i -= len(m.Jsonstr)
		copy(dAtA[i:], m.Jsonstr)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.Jsonstr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SheetListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SheetListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SheetListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GridKey) > 0 {
		i -= len(m.GridKey)
		copy(dAtA[i:], m.GridKey)
		i = encodeVarintSheet(dAtA, i, uint64(len(m.GridKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SheetListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SheetListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SheetListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SheetName) > 0 {
		for iNdEx := len(m.SheetName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SheetName[iNdEx])
			copy(dAtA[i:], m.SheetName[iNdEx])
			i = encodeVarintSheet(dAtA, i, uint64(len(m.SheetName[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSheet(dAtA []byte, offset int, v uint64) int {
	offset -= sovSheet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExcelListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastTime != 0 {
		n += 1 + sovSheet(uint64(m.LastTime))
	}
	if m.Limit != 0 {
		n += 1 + sovSheet(uint64(m.Limit))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleExcel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovSheet(uint64(m.CreateTime))
	}
	if m.EditTime != 0 {
		n += 1 + sovSheet(uint64(m.EditTime))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExcelListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovSheet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateExcelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateExcelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Eid)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadExcelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GridKey)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadExcelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadExcelSheetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GridKey)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Indexs)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadExcelSheetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateExcelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if len(m.Contributers) > 0 {
		for _, s := range m.Contributers {
			l = len(s)
			n += 1 + l + sovSheet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateExcelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteExcelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteExcelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportExcelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GridKey)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.SheetName)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportExcelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Jsonstr)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportProdExcelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GridKey)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.SheetName)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	l = len(m.Gid)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExportProdExcelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Jsonstr)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SheetListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GridKey)
	if l > 0 {
		n += 1 + l + sovSheet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SheetListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SheetName) > 0 {
		for _, s := range m.SheetName {
			l = len(s)
			n += 1 + l + sovSheet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSheet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSheet(x uint64) (n int) {
	return sovSheet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExcelListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExcelListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExcelListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			m.LastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleExcel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleExcel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleExcel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditTime", wireType)
			}
			m.EditTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExcelListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExcelListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExcelListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SimpleExcel{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateExcelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExcelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExcelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateExcelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExcelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExcelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadExcelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadExcelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadExcelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadExcelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadExcelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadExcelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadExcelSheetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadExcelSheetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadExcelSheetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadExcelSheetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadExcelSheetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadExcelSheetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExcelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExcelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExcelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributers = append(m.Contributers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExcelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExcelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExcelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExcelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExcelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExcelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExcelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExcelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExcelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportExcelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportExcelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportExcelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SheetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SheetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportExcelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportExcelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportExcelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jsonstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jsonstr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportProdExcelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportProdExcelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportProdExcelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SheetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SheetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExportProdExcelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportProdExcelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportProdExcelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jsonstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jsonstr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SheetListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SheetListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SheetListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SheetListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SheetListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SheetListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SheetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSheet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSheet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SheetName = append(m.SheetName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSheet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSheet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSheet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSheet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSheet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSheet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSheet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSheet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSheet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSheet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSheet = fmt.Errorf("proto: unexpected end of group")
)
