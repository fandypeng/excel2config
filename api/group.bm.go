// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: group.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	group.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathGroupGroupList = "group/list"
var PathGroupGroupAdd = "group/add"
var PathGroupGroupUpdate = "group/update"
var PathGroupTestConnection = "group/test_connection"
var PathGroupGetConfigFromDB = "group/get_config_from_db"
var PathGroupExportConfigToDB = "group/export_config_to_db"

// GroupBMServer is the server API for Group service.
type GroupBMServer interface {
	GroupList(ctx context.Context, req *GroupListReq) (resp *GroupListResp, err error)

	GroupAdd(ctx context.Context, req *AddGroupReq) (resp *AddGroupResp, err error)

	GroupUpdate(ctx context.Context, req *UpdateGroupReq) (resp *UpdateGroupResp, err error)

	TestConnection(ctx context.Context, req *TestConnectionReq) (resp *TestConnectionResp, err error)

	GetConfigFromDB(ctx context.Context, req *GetConfigFromDBReq) (resp *GetConfigFromDBResp, err error)

	ExportConfigToDB(ctx context.Context, req *ExportConfigToDBReq) (resp *ExportConfigToDBResp, err error)
}

var GroupSvc GroupBMServer

func groupGroupList(c *bm.Context) {
	p := new(GroupListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GroupList(c, p)
	c.JSON(resp, err)
}

func groupGroupAdd(c *bm.Context) {
	p := new(AddGroupReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GroupAdd(c, p)
	c.JSON(resp, err)
}

func groupGroupUpdate(c *bm.Context) {
	p := new(UpdateGroupReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GroupUpdate(c, p)
	c.JSON(resp, err)
}

func groupTestConnection(c *bm.Context) {
	p := new(TestConnectionReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.TestConnection(c, p)
	c.JSON(resp, err)
}

func groupGetConfigFromDB(c *bm.Context) {
	p := new(GetConfigFromDBReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GetConfigFromDB(c, p)
	c.JSON(resp, err)
}

func groupExportConfigToDB(c *bm.Context) {
	p := new(ExportConfigToDBReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.ExportConfigToDB(c, p)
	c.JSON(resp, err)
}

// RegisterGroupBMServer Register the blademaster route
func RegisterGroupBMServer(e *bm.Engine, server GroupBMServer) {
	GroupSvc = server
	e.GET("group/list", groupGroupList)
	e.POST("group/add", groupGroupAdd)
	e.POST("group/update", groupGroupUpdate)
	e.POST("group/test_connection", groupTestConnection)
	e.POST("group/get_config_from_db", groupGetConfigFromDB)
	e.POST("group/export_config_to_db", groupExportConfigToDB)
}
