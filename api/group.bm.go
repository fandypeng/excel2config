// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: group.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	group.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathGroupGroupList = "group/list"
var PathGroupGroupAdd = "group/add"
var PathGroupGroupUpdate = "group/update"
var PathGroupTestConnection = "group/test_connection"
var PathGroupGetConfigFromDB = "group/get_config_from_db"
var PathGroupExportConfigToDB = "group/export_config_to_db"
var PathGroupExportRecord = "group/export_record"
var PathGroupExportRecordContent = "group/export_record_content"
var PathGroupExportRollback = "group/export_rollback"
var PathGroupGenerateAppKeySecret = "group/gen_app_key_secret"
var PathGroupSyncToProd = "group/sync_to_prod"

// GroupBMServer is the server API for Group service.
type GroupBMServer interface {
	GroupList(ctx context.Context, req *GroupListReq) (resp *GroupListResp, err error)

	GroupAdd(ctx context.Context, req *AddGroupReq) (resp *AddGroupResp, err error)

	GroupUpdate(ctx context.Context, req *UpdateGroupReq) (resp *UpdateGroupResp, err error)

	TestConnection(ctx context.Context, req *TestConnectionReq) (resp *TestConnectionResp, err error)

	GetConfigFromDB(ctx context.Context, req *GetConfigFromDBReq) (resp *GetConfigFromDBResp, err error)

	ExportConfigToDB(ctx context.Context, req *ExportConfigToDBReq) (resp *ExportConfigToDBResp, err error)

	ExportRecord(ctx context.Context, req *ExportRecordReq) (resp *ExportRecordResp, err error)

	ExportRecordContent(ctx context.Context, req *ExportRecordContentReq) (resp *ExportRecordContentResp, err error)

	ExportRollback(ctx context.Context, req *ExportRollbackReq) (resp *ExportRollbackResp, err error)

	GenerateAppKeySecret(ctx context.Context, req *GenerateAppKeySecretReq) (resp *GenerateAppKeySecretResp, err error)

	SyncToProd(ctx context.Context, req *SyncToProdReq) (resp *SyncToProdResp, err error)
}

var GroupSvc GroupBMServer

func groupGroupList(c *bm.Context) {
	p := new(GroupListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GroupList(c, p)
	c.JSON(resp, err)
}

func groupGroupAdd(c *bm.Context) {
	p := new(AddGroupReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GroupAdd(c, p)
	c.JSON(resp, err)
}

func groupGroupUpdate(c *bm.Context) {
	p := new(UpdateGroupReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GroupUpdate(c, p)
	c.JSON(resp, err)
}

func groupTestConnection(c *bm.Context) {
	p := new(TestConnectionReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.TestConnection(c, p)
	c.JSON(resp, err)
}

func groupGetConfigFromDB(c *bm.Context) {
	p := new(GetConfigFromDBReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GetConfigFromDB(c, p)
	c.JSON(resp, err)
}

func groupExportConfigToDB(c *bm.Context) {
	p := new(ExportConfigToDBReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.ExportConfigToDB(c, p)
	c.JSON(resp, err)
}

func groupExportRecord(c *bm.Context) {
	p := new(ExportRecordReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.ExportRecord(c, p)
	c.JSON(resp, err)
}

func groupExportRecordContent(c *bm.Context) {
	p := new(ExportRecordContentReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.ExportRecordContent(c, p)
	c.JSON(resp, err)
}

func groupExportRollback(c *bm.Context) {
	p := new(ExportRollbackReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.ExportRollback(c, p)
	c.JSON(resp, err)
}

func groupGenerateAppKeySecret(c *bm.Context) {
	p := new(GenerateAppKeySecretReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.GenerateAppKeySecret(c, p)
	c.JSON(resp, err)
}

func groupSyncToProd(c *bm.Context) {
	p := new(SyncToProdReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := GroupSvc.SyncToProd(c, p)
	c.JSON(resp, err)
}

// RegisterGroupBMServer Register the blademaster route
func RegisterGroupBMServer(e *bm.Engine, server GroupBMServer) {
	GroupSvc = server
	e.GET("group/list", groupGroupList)
	e.POST("group/add", groupGroupAdd)
	e.POST("group/update", groupGroupUpdate)
	e.POST("group/test_connection", groupTestConnection)
	e.POST("group/get_config_from_db", groupGetConfigFromDB)
	e.POST("group/export_config_to_db", groupExportConfigToDB)
	e.POST("group/export_record", groupExportRecord)
	e.POST("group/export_record_content", groupExportRecordContent)
	e.POST("group/export_rollback", groupExportRollback)
	e.GET("group/gen_app_key_secret", groupGenerateAppKeySecret)
	e.POST("group/sync_to_prod", groupSyncToProd)
}
