// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: sheet.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	sheet.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathSheetExcelList = "excel/list"
var PathSheetCreateExcel = "excel/create"
var PathSheetLoadExcel = "excel"
var PathSheetLoadExcelSheet = "excel/sheet"
var PathSheetUpdateExcel = "excel/update"
var PathSheetDeleteExcel = "excel/delete"
var PathSheetExportExcel = "excel/export"
var PathSheetSheetList = "excel/sheet_list"
var PathSheetExportProdExcel = "excel/export_prod"
var PathSheetExportAllSheets = "excel/export_all_sheets"

// SheetBMServer is the server API for Sheet service.
type SheetBMServer interface {
	ExcelList(ctx context.Context, req *ExcelListReq) (resp *ExcelListResp, err error)

	CreateExcel(ctx context.Context, req *CreateExcelReq) (resp *CreateExcelResp, err error)

	LoadExcel(ctx context.Context, req *LoadExcelReq) (resp *LoadExcelResp, err error)

	LoadExcelSheet(ctx context.Context, req *LoadExcelSheetReq) (resp *LoadExcelSheetResp, err error)

	UpdateExcel(ctx context.Context, req *UpdateExcelReq) (resp *UpdateExcelResp, err error)

	DeleteExcel(ctx context.Context, req *DeleteExcelReq) (resp *DeleteExcelResp, err error)

	ExportExcel(ctx context.Context, req *ExportExcelReq) (resp *ExportExcelResp, err error)

	SheetList(ctx context.Context, req *SheetListReq) (resp *SheetListResp, err error)

	ExportProdExcel(ctx context.Context, req *ExportProdExcelReq) (resp *ExportProdExcelResp, err error)

	ExportAllSheets(ctx context.Context, req *ExportAllSheetsReq) (resp *ExportAllSheetsResp, err error)
}

var SheetSvc SheetBMServer

func sheetExcelList(c *bm.Context) {
	p := new(ExcelListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.ExcelList(c, p)
	c.JSON(resp, err)
}

func sheetCreateExcel(c *bm.Context) {
	p := new(CreateExcelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.CreateExcel(c, p)
	c.JSON(resp, err)
}

func sheetLoadExcel(c *bm.Context) {
	p := new(LoadExcelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.LoadExcel(c, p)
	c.JSON(resp, err)
}

func sheetLoadExcelSheet(c *bm.Context) {
	p := new(LoadExcelSheetReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.LoadExcelSheet(c, p)
	c.JSON(resp, err)
}

func sheetUpdateExcel(c *bm.Context) {
	p := new(UpdateExcelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.UpdateExcel(c, p)
	c.JSON(resp, err)
}

func sheetDeleteExcel(c *bm.Context) {
	p := new(DeleteExcelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.DeleteExcel(c, p)
	c.JSON(resp, err)
}

func sheetExportExcel(c *bm.Context) {
	p := new(ExportExcelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.ExportExcel(c, p)
	c.JSON(resp, err)
}

func sheetSheetList(c *bm.Context) {
	p := new(SheetListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.SheetList(c, p)
	c.JSON(resp, err)
}

func sheetExportProdExcel(c *bm.Context) {
	p := new(ExportProdExcelReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.ExportProdExcel(c, p)
	c.JSON(resp, err)
}

func sheetExportAllSheets(c *bm.Context) {
	p := new(ExportAllSheetsReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := SheetSvc.ExportAllSheets(c, p)
	c.JSON(resp, err)
}

// RegisterSheetBMServer Register the blademaster route
func RegisterSheetBMServer(e *bm.Engine, server SheetBMServer) {
	SheetSvc = server
	e.GET("excel/list", sheetExcelList)
	e.POST("excel/create", sheetCreateExcel)
	e.POST("excel", sheetLoadExcel)
	e.POST("excel/sheet", sheetLoadExcelSheet)
	e.POST("excel/update", sheetUpdateExcel)
	e.POST("excel/delete", sheetDeleteExcel)
	e.POST("excel/export", sheetExportExcel)
	e.POST("excel/sheet_list", sheetSheetList)
	e.POST("excel/export_prod", sheetExportProdExcel)
	e.POST("excel/export_all_sheets", sheetExportAllSheets)
}
