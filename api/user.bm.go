// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: user.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	user.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUserLogin = "user/login"
var PathUserRegister = "user/reg"
var PathUserLogout = "user/logout"
var PathUserInfo = "user/info"
var PathUserSearch = "user/search"

// UserBMServer is the server API for User service.
type UserBMServer interface {
	Login(ctx context.Context, req *LoginReq) (resp *LoginResp, err error)

	Register(ctx context.Context, req *RegisterReq) (resp *RegisterResp, err error)

	Logout(ctx context.Context, req *LogoutReq) (resp *LogoutResp, err error)

	Info(ctx context.Context, req *UserInfoReq) (resp *UserInfo, err error)

	Search(ctx context.Context, req *UserSearchReq) (resp *UserSearchResp, err error)
}

var UserSvc UserBMServer

func userLogin(c *bm.Context) {
	p := new(LoginReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Login(c, p)
	c.JSON(resp, err)
}

func userRegister(c *bm.Context) {
	p := new(RegisterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Register(c, p)
	c.JSON(resp, err)
}

func userLogout(c *bm.Context) {
	p := new(LogoutReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Logout(c, p)
	c.JSON(resp, err)
}

func userInfo(c *bm.Context) {
	p := new(UserInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Info(c, p)
	c.JSON(resp, err)
}

func userSearch(c *bm.Context) {
	p := new(UserSearchReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Search(c, p)
	c.JSON(resp, err)
}

// RegisterUserBMServer Register the blademaster route
func RegisterUserBMServer(e *bm.Engine, server UserBMServer) {
	UserSvc = server
	e.GET("user/login", userLogin)
	e.GET("user/reg", userRegister)
	e.POST("user/logout", userLogout)
	e.GET("user/info", userInfo)
	e.GET("user/search", userSearch)
}
